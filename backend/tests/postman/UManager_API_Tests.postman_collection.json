{
  "info": {
    "name": "UManager API Tests - Sequential",
    "description": "Sequential test collection for UManager API that ensures proper test flow and data persistence",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "1. Setup Tests",
      "item": [
        {
          "name": "Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Server is running\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Server is healthy\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('healthy');",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/v1/health",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "health"]
            }
          }
        },
        {
          "name": "API Info",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"API info is available\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"API version is correct\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.version).to.exist;",
                  "    pm.expect(jsonData.environment).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/v1/info",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "info"]
            }
          }
        }
      ]
    },
    {
      "name": "2. User Registration",
      "item": [
        {
          "name": "Register New User",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate unique test data",
                  "const timestamp = Date.now();",
                  "const randomNum = Math.floor(Math.random() * 1000);",
                  "",
                  "// Set unique email and username",
                  "pm.environment.set(\"testEmail\", `test.user.${timestamp}.${randomNum}@example.com`);",
                  "pm.environment.set(\"testUsername\", `testuser_${timestamp}_${randomNum}`);",
                  "pm.environment.set(\"testPassword\", \"TestPass123\");",
                  "pm.environment.set(\"testFirstName\", \"Test\");",
                  "pm.environment.set(\"testLastName\", \"User\");",
                  "",
                  "console.log(\"Test email:\", pm.environment.get(\"testEmail\"));",
                  "console.log(\"Test username:\", pm.environment.get(\"testUsername\"));"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Registration successful\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response structure is correct\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.exist;",
                  "    pm.expect(jsonData.data.user_id).to.exist;",
                  "    pm.expect(jsonData.data.email).to.exist;",
                  "});",
                  "",
                  "pm.test(\"User ID is saved\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.environment.set(\"userId\", jsonData.data.user_id);",
                  "    pm.expect(pm.environment.get(\"userId\")).to.not.be.empty;",
                  "});",
                  "",
                  "pm.test(\"Email matches request\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.email).to.eql(pm.environment.get(\"testEmail\"));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{testEmail}}\",\n    \"username\": \"{{testUsername}}\",\n    \"password\": \"{{testPassword}}\",\n    \"first_name\": \"{{testFirstName}}\",\n    \"last_name\": \"{{testLastName}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/v1/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "auth", "register"]
            }
          }
        },
        {
          "name": "Register Duplicate Email - Should Fail",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Duplicate email registration fails\", function () {",
                  "    pm.response.to.have.status(409);",
                  "});",
                  "",
                  "pm.test(\"Error code is EMAIL_EXISTS\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.error.code).to.eql('EMAIL_EXISTS');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{testEmail}}\",\n    \"username\": \"different_username\",\n    \"password\": \"{{testPassword}}\",\n    \"first_name\": \"Another\",\n    \"last_name\": \"User\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/v1/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "auth", "register"]
            }
          }
        }
      ]
    },
    {
      "name": "3. Authentication",
      "item": [
        {
          "name": "Login with Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Login successful\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Tokens are returned\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data.access_token).to.exist;",
                  "    pm.expect(jsonData.data.refresh_token).to.exist;",
                  "});",
                  "",
                  "pm.test(\"Tokens are saved\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.environment.set(\"accessToken\", jsonData.data.access_token);",
                  "    pm.environment.set(\"refreshToken\", jsonData.data.refresh_token);",
                  "    ",
                  "    pm.expect(pm.environment.get(\"accessToken\")).to.not.be.empty;",
                  "    pm.expect(pm.environment.get(\"refreshToken\")).to.not.be.empty;",
                  "});",
                  "",
                  "pm.test(\"User data is correct\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.user.email).to.eql(pm.environment.get(\"testEmail\"));",
                  "    pm.expect(jsonData.data.user.username).to.eql(pm.environment.get(\"testUsername\"));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{testEmail}}\",\n    \"password\": \"{{testPassword}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/v1/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "auth", "login"]
            }
          }
        },
        {
          "name": "Login with Wrong Password - Should Fail",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Login with wrong password fails\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Error code is INVALID_CREDENTIALS\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.error.code).to.eql('INVALID_CREDENTIALS');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{testEmail}}\",\n    \"password\": \"WrongPassword123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/v1/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "auth", "login"]
            }
          }
        },
        {
          "name": "Login with Username",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Login with username successful\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Tokens are returned\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.access_token).to.exist;",
                  "    pm.expect(jsonData.data.refresh_token).to.exist;",
                  "});",
                  "",
                  "pm.test(\"Username matches\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.user.username).to.eql(pm.environment.get(\"testUsername\"));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{testUsername}}\",\n    \"password\": \"{{testPassword}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/v1/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "auth", "login"]
            }
          }
        }
      ]
    },
    {
      "name": "4. Protected Endpoints",
      "item": [
        {
          "name": "Get Current User - With Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Protected endpoint accessible with token\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"User data is returned\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data.user).to.exist;",
                  "});",
                  "",
                  "pm.test(\"User data matches test user\", function () {",
                  "    const user = pm.response.json().data.user;",
                  "    pm.expect(user.email).to.eql(pm.environment.get(\"testEmail\"));",
                  "    pm.expect(user.username).to.eql(pm.environment.get(\"testUsername\"));",
                  "    pm.expect(user.id).to.eql(pm.environment.get(\"userId\"));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/v1/users/me",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "users", "me"]
            }
          }
        },
        {
          "name": "Get Current User - No Token - Should Fail",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Protected endpoint blocked without token\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Error indicates missing authentication\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.error).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/v1/users/me",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "users", "me"]
            }
          }
        }
      ]
    },
    {
      "name": "5. Token Management",
      "item": [
        {
          "name": "Refresh Token",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Ensure we have a refresh token from login",
                  "const refreshToken = pm.environment.get(\"refreshToken\");",
                  "if (!refreshToken) {",
                  "    console.log(\"Warning: No refresh token available. Run login test first.\");",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Only run tests if we have a valid refresh token",
                  "const refreshToken = pm.environment.get(\"refreshToken\");",
                  "",
                  "if (refreshToken && refreshToken !== \"\") {",
                  "    pm.test(\"Token refresh successful\", function () {",
                  "        pm.response.to.have.status(200);",
                  "    });",
                  "    ",
                  "    pm.test(\"New tokens are returned\", function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData.success).to.be.true;",
                  "        pm.expect(jsonData.data.access_token).to.exist;",
                  "        pm.expect(jsonData.data.refresh_token).to.exist;",
                  "    });",
                  "    ",
                  "    pm.test(\"New tokens are different\", function () {",
                  "        const jsonData = pm.response.json();",
                  "        const oldAccessToken = pm.environment.get(\"accessToken\");",
                  "        const oldRefreshToken = pm.environment.get(\"refreshToken\");",
                  "        ",
                  "        pm.expect(jsonData.data.access_token).to.not.eql(oldAccessToken);",
                  "        pm.expect(jsonData.data.refresh_token).to.not.eql(oldRefreshToken);",
                  "        ",
                  "        // Update tokens",
                  "        pm.environment.set(\"accessToken\", jsonData.data.access_token);",
                  "        pm.environment.set(\"refreshToken\", jsonData.data.refresh_token);",
                  "    });",
                  "} else {",
                  "    pm.test.skip(\"Refresh token test skipped - no token available\");",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"refresh_token\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/v1/auth/refresh",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "auth", "refresh"]
            }
          }
        },
        {
          "name": "Invalid Refresh Token - Should Fail",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Invalid refresh token rejected\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Error code is INVALID_REFRESH_TOKEN\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.error.code).to.eql('INVALID_REFRESH_TOKEN');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"refresh_token\": \"invalid.token.here\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/v1/auth/refresh",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "auth", "refresh"]
            }
          }
        }
      ]
    },
    {
      "name": "6. Logout",
      "item": [
        {
          "name": "Logout User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Logout successful\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Success message returned\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data.message).to.include('logged out');",
                  "});",
                  "",
                  "// Clear tokens after logout",
                  "pm.environment.unset(\"accessToken\");",
                  "pm.environment.unset(\"refreshToken\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"refresh_token\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/v1/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "auth", "logout"]
            }
          }
        },
        {
          "name": "Access After Logout - Should Work",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Note: Since we don't have a persistent token store,",
                  "// the old token will still work. In production with Redis/DB",
                  "// this would return 401"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Without a token store, logout doesn't invalidate tokens",
                  "// This is expected behavior for the current implementation",
                  "pm.test(\"Request completes\", function () {",
                  "    // Either 200 (token still valid) or 401 (token invalidated)",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/v1/users/me",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "users", "me"]
            }
          }
        }
      ]
    },
    {
      "name": "7. Validation Tests",
      "item": [
        {
          "name": "Register with Weak Password - Should Fail",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Weak password rejected\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error indicates validation failure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.error.code).to.be.oneOf(['VALIDATION_ERROR', 'WEAK_PASSWORD']);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"weak@example.com\",\n    \"username\": \"weakuser\",\n    \"password\": \"short\",\n    \"first_name\": \"Weak\",\n    \"last_name\": \"User\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/v1/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "auth", "register"]
            }
          }
        },
        {
          "name": "Register with Missing Fields - Should Fail",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Missing fields rejected\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error indicates validation failure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.error.code).to.eql('VALIDATION_ERROR');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"missing@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/v1/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "auth", "register"]
            }
          }
        },
        {
          "name": "Login with Non-existent User - Should Fail",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Non-existent user login fails\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Error code is INVALID_CREDENTIALS\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.error.code).to.eql('INVALID_CREDENTIALS');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"nonexistent@example.com\",\n    \"password\": \"SomePassword123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/v1/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "auth", "login"]
            }
          }
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    }
  ]
}